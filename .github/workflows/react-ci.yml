name: React CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Limite à 15 minutes max
    environment: EnvironnementMediAi

    env:
      NODE_ENV: test
      CI: true
      VITE_API_URL: http://localhost:8000/api
      VITE_APP_NAME: "Mediai"
      VITE_APP_VERSION: "1.0.0"
      # Variables pour les tests
      VITE_OPENAI_API_KEY: "test-key"
      VITE_ANTHROPIC_API_KEY: "test-key"
      VITE_GOOGLE_API_KEY: "test-key"

    steps:
    - uses: actions/checkout@v4

    - name: Create .env file
      run: |
        echo "VITE_API_URL=http://localhost:8000/api" >> .env
        echo "VITE_APP_NAME=Mediai" >> .env
        echo "VITE_APP_VERSION=1.0.0" >> .env
        echo "VITE_DEVELOPMENT_MODE=true" >> .env
        echo "VITE_OPENAI_API_KEY=test-key" >> .env
        echo "VITE_ANTHROPIC_API_KEY=test-key" >> .env
        echo "VITE_GOOGLE_API_KEY=test-key" >> .env

    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Check for security vulnerabilities
      run: |
        npm audit --audit-level moderate

    - name: Run ESLint
      run: |
        npm run lint

    - name: Type checking (if TypeScript)
      run: |
        # Vérifier si le projet utilise TypeScript
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
        else
          echo "No TypeScript configuration found, skipping type check"
        fi

    - name: Run tests
      run: |
        # Tests unitaires avec Jest/Vitest si configurés
        if npm run test:unit --if-present; then
          echo "Unit tests passed"
        else
          echo "No unit tests configured or tests failed"
        fi

    - name: Build application
      run: |
        npm run build

    - name: Test build artifacts
      run: |
        # Vérifier que les fichiers de build existent
        if [ -d "dist" ]; then
          echo "Build directory exists"
          ls -la dist/
          # Vérifier que les fichiers essentiels sont présents
          if [ -f "dist/index.html" ]; then
            echo "✅ index.html found"
          else
            echo "❌ index.html missing"
            exit 1
          fi
        else
          echo "❌ Build directory missing"
          exit 1
        fi

    - name: Preview build
      run: |
        # Démarrer le serveur de preview en arrière-plan
        npm run preview &
        PREVIEW_PID=$!
        
        # Attendre que le serveur soit prêt
        sleep 5
        
        # Tester que le serveur répond
        if curl -f http://localhost:4173 > /dev/null 2>&1; then
          echo "✅ Preview server is working"
        else
          echo "❌ Preview server failed to start"
          exit 1
        fi
        
        # Arrêter le serveur
        kill $PREVIEW_PID

    - name: Check bundle size
      run: |
        # Analyser la taille du bundle
        if [ -d "dist" ]; then
          echo "Bundle analysis:"
          du -sh dist/*
          
          # Vérifier que le bundle n'est pas trop volumineux (limite: 10MB)
          BUNDLE_SIZE=$(du -sm dist | cut -f1)
          if [ $BUNDLE_SIZE -gt 10 ]; then
            echo "⚠️ Warning: Bundle size is ${BUNDLE_SIZE}MB (> 10MB)"
          else
            echo "✅ Bundle size is acceptable: ${BUNDLE_SIZE}MB"
          fi
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: build-files
        path: dist/
        retention-days: 7

  deploy-preview:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment: preview
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: Deploy to preview environment
      run: |
        echo "🚀 Deploying to preview environment..."
        echo "Preview URL would be: https://preview-pr-${{ github.event.number }}.mediai-frontend.com"
        # Ici vous pourrez ajouter la logique de déploiement réelle
        # Par exemple: deployer sur Netlify, Vercel, ou votre propre serveur

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Staging URL: https://staging.mediai-frontend.com"
        # Logique de déploiement vers staging

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Production URL: https://mediai-frontend.com"
        # Logique de déploiement vers production